// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/Bios-Marcel/cordless/windowman"
	tcell "github.com/gdamore/tcell/v2"
	messagebus "github.com/vardius/message-bus"
)

type FakeDialog struct {
	HandleKeyEventStub        func(*tcell.EventKey) *tcell.EventKey
	handleKeyEventMutex       sync.RWMutex
	handleKeyEventArgsForCall []struct {
		arg1 *tcell.EventKey
	}
	handleKeyEventReturns struct {
		result1 *tcell.EventKey
	}
	handleKeyEventReturnsOnCall map[int]struct {
		result1 *tcell.EventKey
	}
	OnRegisterStub        func(messagebus.MessageBus)
	onRegisterMutex       sync.RWMutex
	onRegisterArgsForCall []struct {
		arg1 messagebus.MessageBus
	}
	OpenStub        func(windowman.DialogCloser) error
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		arg1 windowman.DialogCloser
	}
	openReturns struct {
		result1 error
	}
	openReturnsOnCall map[int]struct {
		result1 error
	}
	ShowStub        func(windowman.ApplicationControl) error
	showMutex       sync.RWMutex
	showArgsForCall []struct {
		arg1 windowman.ApplicationControl
	}
	showReturns struct {
		result1 error
	}
	showReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDialog) HandleKeyEvent(arg1 *tcell.EventKey) *tcell.EventKey {
	fake.handleKeyEventMutex.Lock()
	ret, specificReturn := fake.handleKeyEventReturnsOnCall[len(fake.handleKeyEventArgsForCall)]
	fake.handleKeyEventArgsForCall = append(fake.handleKeyEventArgsForCall, struct {
		arg1 *tcell.EventKey
	}{arg1})
	stub := fake.HandleKeyEventStub
	fakeReturns := fake.handleKeyEventReturns
	fake.recordInvocation("HandleKeyEvent", []interface{}{arg1})
	fake.handleKeyEventMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDialog) HandleKeyEventCallCount() int {
	fake.handleKeyEventMutex.RLock()
	defer fake.handleKeyEventMutex.RUnlock()
	return len(fake.handleKeyEventArgsForCall)
}

func (fake *FakeDialog) HandleKeyEventCalls(stub func(*tcell.EventKey) *tcell.EventKey) {
	fake.handleKeyEventMutex.Lock()
	defer fake.handleKeyEventMutex.Unlock()
	fake.HandleKeyEventStub = stub
}

func (fake *FakeDialog) HandleKeyEventArgsForCall(i int) *tcell.EventKey {
	fake.handleKeyEventMutex.RLock()
	defer fake.handleKeyEventMutex.RUnlock()
	argsForCall := fake.handleKeyEventArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDialog) HandleKeyEventReturns(result1 *tcell.EventKey) {
	fake.handleKeyEventMutex.Lock()
	defer fake.handleKeyEventMutex.Unlock()
	fake.HandleKeyEventStub = nil
	fake.handleKeyEventReturns = struct {
		result1 *tcell.EventKey
	}{result1}
}

func (fake *FakeDialog) HandleKeyEventReturnsOnCall(i int, result1 *tcell.EventKey) {
	fake.handleKeyEventMutex.Lock()
	defer fake.handleKeyEventMutex.Unlock()
	fake.HandleKeyEventStub = nil
	if fake.handleKeyEventReturnsOnCall == nil {
		fake.handleKeyEventReturnsOnCall = make(map[int]struct {
			result1 *tcell.EventKey
		})
	}
	fake.handleKeyEventReturnsOnCall[i] = struct {
		result1 *tcell.EventKey
	}{result1}
}

func (fake *FakeDialog) OnRegister(arg1 messagebus.MessageBus) {
	fake.onRegisterMutex.Lock()
	fake.onRegisterArgsForCall = append(fake.onRegisterArgsForCall, struct {
		arg1 messagebus.MessageBus
	}{arg1})
	stub := fake.OnRegisterStub
	fake.recordInvocation("OnRegister", []interface{}{arg1})
	fake.onRegisterMutex.Unlock()
	if stub != nil {
		fake.OnRegisterStub(arg1)
	}
}

func (fake *FakeDialog) OnRegisterCallCount() int {
	fake.onRegisterMutex.RLock()
	defer fake.onRegisterMutex.RUnlock()
	return len(fake.onRegisterArgsForCall)
}

func (fake *FakeDialog) OnRegisterCalls(stub func(messagebus.MessageBus)) {
	fake.onRegisterMutex.Lock()
	defer fake.onRegisterMutex.Unlock()
	fake.OnRegisterStub = stub
}

func (fake *FakeDialog) OnRegisterArgsForCall(i int) messagebus.MessageBus {
	fake.onRegisterMutex.RLock()
	defer fake.onRegisterMutex.RUnlock()
	argsForCall := fake.onRegisterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDialog) Open(arg1 windowman.DialogCloser) error {
	fake.openMutex.Lock()
	ret, specificReturn := fake.openReturnsOnCall[len(fake.openArgsForCall)]
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		arg1 windowman.DialogCloser
	}{arg1})
	stub := fake.OpenStub
	fakeReturns := fake.openReturns
	fake.recordInvocation("Open", []interface{}{arg1})
	fake.openMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDialog) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeDialog) OpenCalls(stub func(windowman.DialogCloser) error) {
	fake.openMutex.Lock()
	defer fake.openMutex.Unlock()
	fake.OpenStub = stub
}

func (fake *FakeDialog) OpenArgsForCall(i int) windowman.DialogCloser {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	argsForCall := fake.openArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDialog) OpenReturns(result1 error) {
	fake.openMutex.Lock()
	defer fake.openMutex.Unlock()
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDialog) OpenReturnsOnCall(i int, result1 error) {
	fake.openMutex.Lock()
	defer fake.openMutex.Unlock()
	fake.OpenStub = nil
	if fake.openReturnsOnCall == nil {
		fake.openReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.openReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDialog) Show(arg1 windowman.ApplicationControl) error {
	fake.showMutex.Lock()
	ret, specificReturn := fake.showReturnsOnCall[len(fake.showArgsForCall)]
	fake.showArgsForCall = append(fake.showArgsForCall, struct {
		arg1 windowman.ApplicationControl
	}{arg1})
	stub := fake.ShowStub
	fakeReturns := fake.showReturns
	fake.recordInvocation("Show", []interface{}{arg1})
	fake.showMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDialog) ShowCallCount() int {
	fake.showMutex.RLock()
	defer fake.showMutex.RUnlock()
	return len(fake.showArgsForCall)
}

func (fake *FakeDialog) ShowCalls(stub func(windowman.ApplicationControl) error) {
	fake.showMutex.Lock()
	defer fake.showMutex.Unlock()
	fake.ShowStub = stub
}

func (fake *FakeDialog) ShowArgsForCall(i int) windowman.ApplicationControl {
	fake.showMutex.RLock()
	defer fake.showMutex.RUnlock()
	argsForCall := fake.showArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDialog) ShowReturns(result1 error) {
	fake.showMutex.Lock()
	defer fake.showMutex.Unlock()
	fake.ShowStub = nil
	fake.showReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDialog) ShowReturnsOnCall(i int, result1 error) {
	fake.showMutex.Lock()
	defer fake.showMutex.Unlock()
	fake.ShowStub = nil
	if fake.showReturnsOnCall == nil {
		fake.showReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.showReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDialog) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleKeyEventMutex.RLock()
	defer fake.handleKeyEventMutex.RUnlock()
	fake.onRegisterMutex.RLock()
	defer fake.onRegisterMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	fake.showMutex.RLock()
	defer fake.showMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDialog) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ windowman.Dialog = new(FakeDialog)
